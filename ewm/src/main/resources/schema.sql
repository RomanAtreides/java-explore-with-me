-- Users
CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(512) NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (id),
    CONSTRAINT uq_user_email UNIQUE (email)
);

-- Categories
-- С категорией не должно быть связано ни одного события!
CREATE TABLE IF NOT EXISTS categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) NOT NULL,
    CONSTRAINT pk_category PRIMARY KEY (id),
    CONSTRAINT uq_category_name UNIQUE (name)
);

-- Events
CREATE TABLE IF NOT EXISTS events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    annotation VARCHAR(2000),
    category_id BIGINT,
    confirmed_requests BIGINT,
    created_on TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    description VARCHAR(7000),
    event_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    initiator_id BIGINT,
    latitude REAL,
    longitude REAL,
    paid BOOLEAN,
    participant_limit INT,
    published_on TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    request_moderation BOOLEAN,
    state VARCHAR(64) NOT NULL,
    title VARCHAR(120),
    views BIGINT,
    CONSTRAINT pk_event PRIMARY KEY (id),
    CONSTRAINT fk_event_on_category FOREIGN KEY (category_id) REFERENCES categories (id),
    CONSTRAINT fk_event_on_initiator FOREIGN KEY (initiator_id) REFERENCES users (id)
);

-- Participation requests
CREATE TABLE IF NOT EXISTS participation_requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    event_id BIGINT,
    requester_id BIGINT,
    status VARCHAR(64) NOT NULL,
    CONSTRAINT pk_participation_request PRIMARY KEY (id),
    CONSTRAINT fk_participation_request_on_event FOREIGN KEY (event_id) REFERENCES events (id),
    CONSTRAINT fk_participation_request_on_user FOREIGN KEY (requester_id) REFERENCES users (id)
);

-- Между событиями и подборками связь many-to-many:
-- Одно событие может участвовать в нескольких подборках
-- В одной подборке может быть несколько событий
-- Такая связь реализуется с помощью промежуточной таблицы (compilation_of_events)
-- которая содержит foreign key на таблицу compilations
-- и foreign key на таблицу events
-- В коде это всё реализуется в помощью аннотации many-to-many